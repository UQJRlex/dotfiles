#!/usr/bin/sh
# @author nate zhou
# @since 2025
# encrypt the file with symmetric cipher, using wmenu for input and examine
# the passphrase for prompting the 2nd input

CIPHER_ALGO=aes256
usage() {
    echo -e "usage:\t$(basename "$0") file\n\tencrypt files with symmetric cipher $CIPHER_ALGO using wmenu for input"
}

# print help menu if no arguments is provided
if [ "$#" -eq 0 ]; then
    usage
    exit 1
fi

# use wmenu to input passphrase
gpg_passphrase1=$(echo "" | wmenu -P -f "SourceCodePro medium 13" -p "[$(basename $0)] passphrase: " -S 6f3f89 -s ffffff -M 6f3f89 -m ffffff)

# don't do anything if exiting wmenu without any input
if  [ -z "$gpg_passphrase1" ]; then
    notify-send -r 1284 -u low "$(basename $0):" "Aborted for empty passphrase"
    exit 1
fi
gpg_passphrase2=$(echo "" | wmenu -P -f "SourceCodePro medium 13" -p "[$(basename $0)] passphrase again " -S 6f3f89 -s ffffff -M 6f3f89 -m ffffff)
if [ "$gpg_passphrase1" != "$gpg_passphrase2" ]; then
    notify-send -r 1284 -u low "inputs are not identical!"
    exit 1
fi

echo "$gpg_passphrase1" | gpg --batch --passphrase-fd 0 -c --cipher-algo "$CIPHER_ALGO" "$1" && msg="encryption done" || msg="encryption failed"

[ "$XDG_SESSION_TYPE" != "tty" ] && notify-send -u low -r 1284 "$(basename $0)" "$msg"

# clean cached passphrase
gpg-connect-agent reloadagent /bye > /dev/null
