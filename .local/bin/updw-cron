#!/usr/bin/env bash
# @author nate zhou
# @since 2024,2025
# updw-cron, update dunst weather with crontab for i3blocks
# @depends: libnotify, dunst, cronie, dw*, updw*
# running with dmenu/wmenu is recommended

WTTR_CACHE="$HOME/.cache/wttr"
# if cache doesn't exist, init by calling updw
[ -f "$HOME/.cache/wttr" ] || $HOME/.local/bin/updw

# modified time in seconds since the Epoch
update_time="$(stat -c "%Y" "$WTTR_CACHE")"
# seconds since the Epoch
current_time="$(date +%s)"
UPDATE_FREQUENCY=3600 # in seconds, 7200s = 2H

if [ -f "$HOME/.cache/city" ]; then
    CITY="$(cat $HOME/.cache/city)"

    if [ -z "$CITY" ]; then
        msg="~/.cache/city is empty, write the city name to it"
        #notify-send -u low -r 21 "$msg"
        echo $msg
    else

        # check last update time
        # only download weather if gap's greater than 2 hours
        if (( current_time - update_time > UPDATE_FREQUENCY )); then
        # try to download weather info
        wttr_temp="$(curl wttr.in/$CITY?format=1)"
        else
            echo "Already updated within past $(($UPDATE_FREQUENCY/3600)) hours"
            exit 1
        fi

        # check if curl returns a temperature
        if [[ "$wttr_temp" == *Â°C* ]] ; then
            # remove potential repeating spaces
            echo "$wttr_temp" | sed 's/[[:space:]]\+/ /g' > "$HOME/.cache/wttr"
            # adding update timestamp
            #echo "($(date +'%b-%d %a %H:%M'))" >> $HOME/.cache/wttr
            msg="updw done"
            #notify-send -u low -r 22 "$msg"
            echo $msg
            pkill -SIGRTMIN+7 i3blocks
        else
            msg="updw failed, check network ?"
            #notify-send -u low -r 21 "$msg"
            echo $msg
        fi
    fi

else
    msg="~/.cache/city does not exist, write the city name to it"
    notify-send -u low -r 21 "$msg"
    echo $msg
fi
